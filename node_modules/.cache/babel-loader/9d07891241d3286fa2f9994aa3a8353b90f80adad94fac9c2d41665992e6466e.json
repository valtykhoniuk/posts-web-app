{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport PostList from \"./components/PostList.vue\";\nimport PostForm from \"./components/PostForm.vue\";\nimport axios from \"axios\";\nexport default {\n  components: {\n    PostList,\n    PostForm\n  },\n  data() {\n    return {\n      posts: [],\n      dialogVisible: false,\n      isPostLoading: false,\n      selectedSord: \"\",\n      sortedOptions: [{\n        value: \"title\",\n        name: \"By name\"\n      }, {\n        value: \"body\",\n        name: \"By context\"\n      }]\n    };\n  },\n  methods: {\n    createPost(post) {\n      this.posts.push(post);\n      this.dialogVisible = false;\n    },\n    removePost(post) {\n      this.posts = this.posts.filter(p => p.id !== post.id);\n    },\n    showDialog() {\n      this.dialogVisible = true;\n    },\n    async fetchPosts() {\n      try {\n        this.isPostLoading = true;\n        const response = await axios.get(\"https://jsonplaceholder.typicode.com/posts?_limit=10\");\n        this.posts = response.data;\n        this.isPostLoading = false;\n      } catch (error) {\n        alert(\"Error\");\n        this.isPostLoading = false;\n      }\n    }\n  },\n  mounted() {\n    this.fetchPosts();\n  },\n  // watch: {\n  //   selectedSord(newValue) {\n  //     this.posts.sort((post1, post2) => {\n  //       return post1[newValue]?.localeCompare(post2[newValue]);\n  //     });\n  //   },\n  // },\n  computed: {\n    sortedPosts() {\n      return [...this.posts].sort((post1, post2) => {\n        return post1[newValue]?.localeCompare(post2[newValue]);\n      });\n    }\n  }\n};","map":{"version":3,"names":["PostList","PostForm","axios","components","data","posts","dialogVisible","isPostLoading","selectedSord","sortedOptions","value","name","methods","createPost","post","push","removePost","filter","p","id","showDialog","fetchPosts","response","get","error","alert","mounted","computed","sortedPosts","sort","post1","post2","newValue","localeCompare"],"sources":["/Users/valeriiatykhoniuk/Documents/practice/posts-web-app/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"app\">\n    <h1>Make post</h1>\n    <div class=\"app__btns\">\n      <my-button @click=\"showDialog\">Create post</my-button>\n      <my-select v-model=\"selectedSord\" :options=\"sortedOptions\"></my-select>\n    </div>\n\n    <my-dialog v-model:show=\"dialogVisible\">\n      <post-form @create=\"createPost\" />\n    </my-dialog>\n    <post-list :posts=\"posts\" @remove=\"removePost\" v-if=\"!isPostLoading\" />\n    <div v-else>Loading..</div>\n  </div>\n</template>\n\n<script>\nimport PostList from \"./components/PostList.vue\";\nimport PostForm from \"./components/PostForm.vue\";\nimport axios from \"axios\";\n\nexport default {\n  components: {\n    PostList,\n    PostForm,\n  },\n\n  data() {\n    return {\n      posts: [],\n      dialogVisible: false,\n      isPostLoading: false,\n      selectedSord: \"\",\n      sortedOptions: [\n        { value: \"title\", name: \"By name\" },\n        { value: \"body\", name: \"By context\" },\n      ],\n    };\n  },\n\n  methods: {\n    createPost(post) {\n      this.posts.push(post);\n      this.dialogVisible = false;\n    },\n\n    removePost(post) {\n      this.posts = this.posts.filter((p) => p.id !== post.id);\n    },\n\n    showDialog() {\n      this.dialogVisible = true;\n    },\n\n    async fetchPosts() {\n      try {\n        this.isPostLoading = true;\n        const response = await axios.get(\n          \"https://jsonplaceholder.typicode.com/posts?_limit=10\"\n        );\n        this.posts = response.data;\n        this.isPostLoading = false;\n      } catch (error) {\n        alert(\"Error\");\n        this.isPostLoading = false;\n      }\n    },\n  },\n\n  mounted() {\n    this.fetchPosts();\n  },\n\n  // watch: {\n  //   selectedSord(newValue) {\n  //     this.posts.sort((post1, post2) => {\n  //       return post1[newValue]?.localeCompare(post2[newValue]);\n  //     });\n  //   },\n  // },\n  computed: {\n    sortedPosts() {\n      return [...this.posts].sort((post1, post2) => {\n        return post1[newValue]?.localeCompare(post2[newValue]);\n      });\n    },\n  },\n};\n</script>\n\n<style>\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.app {\n  padding: 20px;\n}\n\n.app__btns {\n  display: flex;\n  justify-content: space-between;\n  margin: 15px 0;\n}\n</style>\n"],"mappings":";;;AAiBA,OAAOA,QAAO,MAAO,2BAA2B;AAChD,OAAOC,QAAO,MAAO,2BAA2B;AAChD,OAAOC,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,UAAU,EAAE;IACVH,QAAQ;IACRC;EACF,CAAC;EAEDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,aAAa,EAAE,KAAK;MACpBC,aAAa,EAAE,KAAK;MACpBC,YAAY,EAAE,EAAE;MAChBC,aAAa,EAAE,CACb;QAAEC,KAAK,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAU,CAAC,EACnC;QAAED,KAAK,EAAE,MAAM;QAAEC,IAAI,EAAE;MAAa,CAAC;IAEzC,CAAC;EACH,CAAC;EAEDC,OAAO,EAAE;IACPC,UAAUA,CAACC,IAAI,EAAE;MACf,IAAI,CAACT,KAAK,CAACU,IAAI,CAACD,IAAI,CAAC;MACrB,IAAI,CAACR,aAAY,GAAI,KAAK;IAC5B,CAAC;IAEDU,UAAUA,CAACF,IAAI,EAAE;MACf,IAAI,CAACT,KAAI,GAAI,IAAI,CAACA,KAAK,CAACY,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAC,KAAML,IAAI,CAACK,EAAE,CAAC;IACzD,CAAC;IAEDC,UAAUA,CAAA,EAAG;MACX,IAAI,CAACd,aAAY,GAAI,IAAI;IAC3B,CAAC;IAED,MAAMe,UAAUA,CAAA,EAAG;MACjB,IAAI;QACF,IAAI,CAACd,aAAY,GAAI,IAAI;QACzB,MAAMe,QAAO,GAAI,MAAMpB,KAAK,CAACqB,GAAG,CAC9B,sDACF,CAAC;QACD,IAAI,CAAClB,KAAI,GAAIiB,QAAQ,CAAClB,IAAI;QAC1B,IAAI,CAACG,aAAY,GAAI,KAAK;MAC5B,EAAE,OAAOiB,KAAK,EAAE;QACdC,KAAK,CAAC,OAAO,CAAC;QACd,IAAI,CAAClB,aAAY,GAAI,KAAK;MAC5B;IACF;EACF,CAAC;EAEDmB,OAAOA,CAAA,EAAG;IACR,IAAI,CAACL,UAAU,CAAC,CAAC;EACnB,CAAC;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACAM,QAAQ,EAAE;IACRC,WAAWA,CAAA,EAAG;MACZ,OAAO,CAAC,GAAG,IAAI,CAACvB,KAAK,CAAC,CAACwB,IAAI,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;QAC5C,OAAOD,KAAK,CAACE,QAAQ,CAAC,EAAEC,aAAa,CAACF,KAAK,CAACC,QAAQ,CAAC,CAAC;MACxD,CAAC,CAAC;IACJ;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}